---
interface Props {
    id: string;
    label: string;
    options: string[];
    defaultValue?: string;
}

const { id, label, options, defaultValue = options[0] } = Astro.props;
---

<div class="flex flex-col gap-2 flex-1">
    <label class="font-medium text-sm">{label}</label>
    <div class="relative">
        <input type="hidden" id={id} name={id} value={defaultValue} />
        <button
            type="button"
            id={`${id}-button`}
            class="w-full border border-gray-300 p-2 rounded-lg focus:outline-none bg-white cursor-pointer text-left flex justify-between items-center"
        >
            <span class="selected-value">{defaultValue}</span>
            <svg class="w-4 h-4 transition-transform select-arrow" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="m6 9 6 6 6-6"/>
            </svg>
        </button>
        <div
            id={`${id}-dropdown`}
            class="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg hidden z-10"
        >
            {options.map((option, index) => (
                <div 
                    class={`select-option p-2 hover:bg-gray-100 cursor-pointer ${index === 0 ? 'rounded-t-lg' : ''} ${index === options.length - 1 ? 'rounded-b-lg' : ''}`}
                    data-value={option}
                >
                    {option}
                </div>
            ))}
        </div>
    </div>
</div>

<script type="module">
    document.addEventListener('DOMContentLoaded', () => {
        const selects = document.querySelectorAll('[id$="-button"]');
        
        selects.forEach(button => {
            const id = button.id.replace('-button', '');
            const dropdown = document.getElementById(`${id}-dropdown`);
            const arrow = button.querySelector('.select-arrow');
            const selectedSpan = button.querySelector('.selected-value');
            const hiddenInput = document.getElementById(id);

            button.addEventListener('click', () => {
                dropdown?.classList.toggle('hidden');
                arrow?.classList.toggle('rotate-180');
            });

            document.addEventListener('click', (e) => {
                if (!button.contains(e.target) && !dropdown?.contains(e.target)) {
                    dropdown?.classList.add('hidden');
                    arrow?.classList.remove('rotate-180');
                }
            });

            dropdown?.addEventListener('click', (e) => {
                const target = e.target;
                if (target.classList.contains('select-option')) {
                    const value = target.dataset.value;
                    if (selectedSpan && value && hiddenInput) {
                        selectedSpan.textContent = value;
                        hiddenInput.value = value;
                    }
                    dropdown.classList.add('hidden');
                    arrow?.classList.remove('rotate-180');
                }
            });
        });
    });
</script>
