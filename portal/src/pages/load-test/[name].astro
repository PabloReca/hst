---
// src/pages/load-test/[name].astro
import Layout from "@/layouts/Layout.astro";

const { name } = Astro.params;

interface LoadTestConfig {
    url: string;
    method: string;
    headers?: Record<string, string>;
    body?: string;
    callsPerThread: number;
    threads: number;
    totalCalls: number;
    timeout: number;
    expectedStatusCode: number;
}

interface LoadTest {
    _id: string;
    name: string;
    testConfig: LoadTestConfig;
    totalRequests: number;
    successfulRequests: number;
    failedRequests: number;
    totalDuration: number;
    requestsPerSecond: number;
    averageTime: number;
    minTime: number;
    maxTime: number;
    medianTime: number;
    p95Time: number;
    p99Time: number;
    statusCodes: Record<string, number>;
    errorCount: number;
    totalBytesReceived: number;
    throughputMBps: number;
    successRate: number;
    timestamp: string;
}

interface LoadTestLog {
    _id: string;
    name: string;
    url: string;
    method: string;
    statusCode: number;
    responseTime: number;
    success: boolean;
    error?: string;
    timestamp: string;
}

interface LogStats {
    total: number;
    successful: number;
    failed: number;
    successRate: number;
}

// Fetch load test details
let loadTest: LoadTest | null = null;
let logs: LoadTestLog[] = [];
let stats: LogStats | null = null;

try {
    const response = await fetch('http://localhost:4321/api/load-test');
    const data = await response.json();
    if (data.success) {
        loadTest = data.data.find((test: LoadTest) => test.name === name);
    }
} catch (error) {
    console.error('Failed to fetch load test:', error);
}

if (!loadTest) {
    return Astro.redirect('/load-test');
}

// Fetch logs
try {
    const response = await fetch(`http://localhost:4321/api/load-test/${name}/logs`);
    const data = await response.json();
    if (data.success) {
        logs = data.data;
        stats = data.stats;
    }
} catch (error) {
    console.error('Failed to fetch logs:', error);
}
---

<Layout>
    <main class="px-16 gap-8 flex flex-col py-8">
        <div class="flex items-center gap-4">
            <a href="/load-test" class="text-gray-600 hover:text-black transition-colors">
                ‚Üê Back to Load Tests
            </a>
        </div>

        <header>
            <div class="flex items-start justify-between">
                <div>
                    <h1 class="text-3xl font-semibold">{loadTest.name}</h1>
                    <p class="text-gray-600 mt-2 font-mono text-sm">{loadTest.testConfig.url}</p>
                </div>
                <span class={`text-sm px-3 py-1.5 rounded font-medium ${
                    loadTest.successRate >= 95 
                        ? 'bg-green-100 text-green-800' 
                        : loadTest.successRate >= 80 
                        ? 'bg-yellow-100 text-yellow-800' 
                        : 'bg-red-100 text-red-800'
                }`}>
                    {loadTest.successRate.toFixed(1)}% Success Rate
                </span>
            </div>
            
            <div class="flex flex-wrap gap-3 mt-4">
                <span class="text-sm bg-gray-100 px-3 py-1.5 rounded font-medium">
                    {loadTest.testConfig.method}
                </span>
                <span class="text-sm bg-blue-50 text-blue-700 px-3 py-1.5 rounded">
                    {loadTest.testConfig.threads} threads
                </span>
                <span class="text-sm bg-purple-50 text-purple-700 px-3 py-1.5 rounded">
                    {loadTest.testConfig.callsPerThread} calls/thread
                </span>
                <span class="text-sm bg-gray-100 px-3 py-1.5 rounded">
                    Expected: {loadTest.testConfig.expectedStatusCode}
                </span>
                <span class="text-sm bg-gray-100 px-3 py-1.5 rounded">
                    Timeout: {loadTest.testConfig.timeout}s
                </span>
            </div>
        </header>

        <!-- Metrics Summary -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div class="bg-gray-50 rounded-lg p-4">
                <p class="text-sm text-gray-600">Total Requests</p>
                <p class="text-2xl font-bold mt-1">{loadTest.totalRequests.toLocaleString()}</p>
            </div>
            <div class="bg-gray-50 rounded-lg p-4">
                <p class="text-sm text-gray-600">Requests/Second</p>
                <p class="text-2xl font-bold mt-1">{loadTest.requestsPerSecond.toFixed(2)}</p>
            </div>
            <div class="bg-gray-50 rounded-lg p-4">
                <p class="text-sm text-gray-600">Avg Response Time</p>
                <p class="text-2xl font-bold mt-1">{loadTest.averageTime.toFixed(0)}ms</p>
            </div>
            <div class="bg-gray-50 rounded-lg p-4">
                <p class="text-sm text-gray-600">Throughput</p>
                <p class="text-2xl font-bold mt-1">{loadTest.throughputMBps.toFixed(2)} MB/s</p>
            </div>
        </div>

        <!-- Response Time Stats -->
        <div class="border rounded-lg overflow-hidden">
            <div class="bg-gray-50 px-6 py-4 border-b">
                <h2 class="font-semibold">Response Time Distribution</h2>
            </div>
            <div class="p-6">
                <div class="grid grid-cols-2 md:grid-cols-5 gap-4">
                    <div>
                        <p class="text-sm text-gray-600">Min</p>
                        <p class="text-xl font-semibold mt-1">{loadTest.minTime.toFixed(0)}ms</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Median</p>
                        <p class="text-xl font-semibold mt-1">{loadTest.medianTime.toFixed(0)}ms</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">P95</p>
                        <p class="text-xl font-semibold mt-1">{loadTest.p95Time.toFixed(0)}ms</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">P99</p>
                        <p class="text-xl font-semibold mt-1">{loadTest.p99Time.toFixed(0)}ms</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Max</p>
                        <p class="text-xl font-semibold mt-1">{loadTest.maxTime.toFixed(0)}ms</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Codes -->
        <div class="border rounded-lg overflow-hidden">
            <div class="bg-gray-50 px-6 py-4 border-b">
                <h2 class="font-semibold">Status Code Distribution</h2>
            </div>
            <div class="p-6">
                <div class="flex flex-wrap gap-4">
                    {Object.entries(loadTest.statusCodes).map(([code, count]) => (
                        <div class="border rounded-lg px-4 py-3">
                            <p class="text-sm text-gray-600">HTTP {code}</p>
                            <p class="text-xl font-semibold mt-1">
                                {count} 
                                <span class="text-sm text-gray-500 font-normal">
                                    ({((count / loadTest.totalRequests) * 100).toFixed(1)}%)
                                </span>
                            </p>
                        </div>
                    ))}
                </div>
            </div>
        </div>

        <!-- Logs -->
        <div class="border rounded-lg overflow-hidden">
            <div class="bg-gray-50 px-6 py-4 border-b flex items-center justify-between">
                <h2 class="font-semibold">Request Logs</h2>
                <div class="flex gap-2">
                    <button 
                        id="filter-all" 
                        class="text-sm px-3 py-1 rounded transition-colors bg-black text-white border border-black"
                        data-filter="all"
                    >
                        All ({stats?.total || 0})
                    </button>
                    <button 
                        id="filter-success" 
                        class="text-sm px-3 py-1 rounded transition-colors bg-white text-gray-600 border border-gray-300 hover:bg-gray-50"
                        data-filter="success"
                    >
                        Success ({stats?.successful || 0})
                    </button>
                    <button 
                        id="filter-failed" 
                        class="text-sm px-3 py-1 rounded transition-colors bg-white text-gray-600 border border-gray-300 hover:bg-gray-50"
                        data-filter="failed"
                    >
                        Failed ({stats?.failed || 0})
                    </button>
                </div>
            </div>
            <div class="overflow-x-auto">
                <div id="logs-container" class="min-w-full">
                    {logs.length === 0 ? (
                        <p class="text-gray-600 text-center py-8">No logs available</p>
                    ) : (
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Timestamp
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Status
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Response Time
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Result
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                {logs.map((log) => (
                                    <tr class={`transition-opacity duration-200 ${log.success ? 'log-success' : 'log-failed'}`}>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                            {new Date(log.timestamp).toLocaleString()}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class={`text-sm font-medium ${
                                                log.statusCode >= 200 && log.statusCode < 300 
                                                    ? 'text-green-600' 
                                                    : log.statusCode >= 400 && log.statusCode < 500
                                                    ? 'text-yellow-600'
                                                    : 'text-red-600'
                                            }`}>
                                                {log.statusCode}
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                            {log.responseTime}ms
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            {log.success ? (
                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                    Success
                                                </span>
                                            ) : (
                                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                    Failed
                                                </span>
                                            )}
                                            {log.error && (
                                                <span class="ml-2 text-xs text-gray-500">
                                                    {log.error}
                                                </span>
                                            )}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    )}
                </div>
            </div>
        </div>
    </main>
</Layout>

<script>
    // Filter functionality
    const filterButtons = document.querySelectorAll('[data-filter]') as NodeListOf<HTMLButtonElement>;
    const logRows = document.querySelectorAll('.log-success, .log-failed') as NodeListOf<HTMLElement>;

    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            const filter = button.getAttribute('data-filter');
            
            // Update active state
            filterButtons.forEach(btn => {
                btn.classList.remove('bg-black', 'text-white', 'border-black');
                btn.classList.add('bg-white', 'text-gray-600', 'border-gray-300', 'hover:bg-gray-50');
            });
            button.classList.remove('bg-white', 'text-gray-600', 'border-gray-300', 'hover:bg-gray-50');
            button.classList.add('bg-black', 'text-white', 'border-black');
            
            // Filter rows
            logRows.forEach(row => {
                if (filter === 'all') {
                    row.classList.remove('hidden');
                } else if (filter === 'success') {
                    if (row.classList.contains('log-success')) {
                        row.classList.remove('hidden');
                    } else {
                        row.classList.add('hidden');
                    }
                } else if (filter === 'failed') {
                    if (row.classList.contains('log-failed')) {
                        row.classList.remove('hidden');
                    } else {
                        row.classList.add('hidden');
                    }
                }
            });
        });
    });
</script>